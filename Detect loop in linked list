//can be solved using hashmap but space complexity- O(N)
//better approach: Floyd's cycle detection algorithm
//https://www.youtube.com/watch?v=jcZtMh_jov0


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *&head) {
        ListNode *slowptr=head;
        ListNode *fastptr=head;
        while(fastptr!=NULL && fastptr->next!=NULL){
            slowptr=slowptr->next;
            fastptr=fastptr->next->next;
            
            if(fastptr==slowptr)
                return true;
        }
        return false;
    }
};
